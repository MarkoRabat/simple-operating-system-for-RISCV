GAS LISTING /tmp/ccV9AulW.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB33:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by marko on 20.4.22..
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../h/tcb.hpp"
   7:src/riscv.cpp **** #include "../lib/console.h"
   8:src/riscv.cpp **** #include "../h/print.hpp"
   9:src/riscv.cpp **** 
  10:src/riscv.cpp **** void Riscv::popSppSpie()
  11:src/riscv.cpp **** {
  12              		.loc 1 11 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  12:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  20              		.loc 1 12 5
  21              		.loc 1 12 38 is_stmt 0
  22              	#APP
  23              	# 12 "src/riscv.cpp" 1
  13              	    __asm__ volatile("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 13 5 is_stmt 1
  27              		.loc 1 13 29 is_stmt 0
  28              	# 13 "src/riscv.cpp" 1
  14              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 14 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE33:
  42              		.section	.rodata.str1.8,"aMS",@progbits,1
  43              		.align	3
  44              	.LC0:
  45 0000 0A613020 		.string	"\na0 = "
GAS LISTING /tmp/ccV9AulW.s 			page 2


  45      3D2000
  46 0007 00       		.align	3
  47              	.LC1:
  48 0008 0A613120 		.string	"\na1 = "
  48      3D2000
  49              		.text
  50              		.align	2
  51              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  53              	_ZN5Riscv20handleSupervisorTrapEv:
  54              	.LFB34:
  15:src/riscv.cpp **** 
  16:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  17:src/riscv.cpp **** {
  55              		.loc 1 17 1 is_stmt 1
  56              		.cfi_startproc
  57 0020 130101F9 		addi	sp,sp,-112
  58              		.cfi_def_cfa_offset 112
  59 0024 23341106 		sd	ra,104(sp)
  60 0028 23308106 		sd	s0,96(sp)
  61              		.cfi_offset 1, -8
  62              		.cfi_offset 8, -16
  63 002c 13040107 		addi	s0,sp,112
  64              		.cfi_def_cfa 8, 0
  18:src/riscv.cpp ****     uint64 scause = r_scause();
  65              		.loc 1 18 5
  66              	.LBB30:
  67              	.LBB31:
  68              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** #ifndef RISCV_HPP
   2:src/../h/riscv.hpp **** #define RISCV_HPP
   3:src/../h/riscv.hpp **** 
   4:src/../h/riscv.hpp **** #include "../lib/hw.h"
   5:src/../h/riscv.hpp **** 
   6:src/../h/riscv.hpp **** class Riscv
   7:src/../h/riscv.hpp **** {
   8:src/../h/riscv.hpp **** public:
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  11:src/../h/riscv.hpp ****     static void popSppSpie();
  12:src/../h/riscv.hpp **** 
  13:src/../h/riscv.hpp ****     // read register scause
  14:src/../h/riscv.hpp ****     static uint64 r_scause();
  15:src/../h/riscv.hpp **** 
  16:src/../h/riscv.hpp ****     // write register scause
  17:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  18:src/../h/riscv.hpp **** 
  19:src/../h/riscv.hpp ****     // read register sepc
  20:src/../h/riscv.hpp ****     static uint64 r_sepc();
  21:src/../h/riscv.hpp **** 
  22:src/../h/riscv.hpp ****     // write register sepc
  23:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  24:src/../h/riscv.hpp **** 
  25:src/../h/riscv.hpp ****     // read register stvec
  26:src/../h/riscv.hpp ****     static uint64 r_stvec();
  27:src/../h/riscv.hpp **** 
  28:src/../h/riscv.hpp ****     // write register stvec
  29:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
GAS LISTING /tmp/ccV9AulW.s 			page 3


  30:src/../h/riscv.hpp **** 
  31:src/../h/riscv.hpp ****     // read register stval
  32:src/../h/riscv.hpp ****     static uint64 r_stval();
  33:src/../h/riscv.hpp **** 
  34:src/../h/riscv.hpp ****     // write register stval
  35:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  36:src/../h/riscv.hpp **** 
  37:src/../h/riscv.hpp ****     enum BitMaskSip
  38:src/../h/riscv.hpp ****     {
  39:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  40:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  41:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  42:src/../h/riscv.hpp ****     };
  43:src/../h/riscv.hpp **** 
  44:src/../h/riscv.hpp ****     // mask set register sip
  45:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  46:src/../h/riscv.hpp **** 
  47:src/../h/riscv.hpp ****     // mask clear register sip
  48:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  49:src/../h/riscv.hpp **** 
  50:src/../h/riscv.hpp ****     // read register sip
  51:src/../h/riscv.hpp ****     static uint64 r_sip();
  52:src/../h/riscv.hpp **** 
  53:src/../h/riscv.hpp ****     // write register sip
  54:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  55:src/../h/riscv.hpp **** 
  56:src/../h/riscv.hpp ****     enum BitMaskSstatus
  57:src/../h/riscv.hpp ****     {
  58:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  59:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  60:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  61:src/../h/riscv.hpp ****     };
  62:src/../h/riscv.hpp **** 
  63:src/../h/riscv.hpp ****     // mask set register sstatus
  64:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  65:src/../h/riscv.hpp **** 
  66:src/../h/riscv.hpp ****     // mask clear register sstatus
  67:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  68:src/../h/riscv.hpp **** 
  69:src/../h/riscv.hpp ****     // read register sstatus
  70:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  71:src/../h/riscv.hpp **** 
  72:src/../h/riscv.hpp ****     // write register sstatus
  73:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  74:src/../h/riscv.hpp **** 
  75:src/../h/riscv.hpp ****     // supervisor trap
  76:src/../h/riscv.hpp ****     static void supervisorTrap();
  77:src/../h/riscv.hpp **** 
  78:src/../h/riscv.hpp **** private:
  79:src/../h/riscv.hpp **** 
  80:src/../h/riscv.hpp ****     // supervisor trap handler
  81:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  82:src/../h/riscv.hpp **** 
  83:src/../h/riscv.hpp **** };
  84:src/../h/riscv.hpp **** 
  85:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  86:src/../h/riscv.hpp **** {
GAS LISTING /tmp/ccV9AulW.s 			page 4


  87:src/../h/riscv.hpp ****     uint64 volatile scause;
  69              		.loc 2 87 5
  88:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  70              		.loc 2 88 5
  71              		.loc 2 88 72 is_stmt 0
  72              	#APP
  73              	# 88 "src/../h/riscv.hpp" 1
  89              	    return scause;
  74              		csrr a5, scause
  75              	# 0 "" 2
  76              	#NO_APP
  77 0034 2334F4FC 		sd	a5,-56(s0)
  78              		.loc 2 89 5 is_stmt 1
  79              		.loc 2 89 12 is_stmt 0
  80 0038 033784FC 		ld	a4,-56(s0)
  81              	.LVL0:
  82              	.LBE31:
  83              	.LBE30:
  19:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
  84              		.loc 1 19 5 is_stmt 1
  85              	.LBB32:
  86              		.loc 1 19 40 is_stmt 0
  87 003c 930687FF 		addi	a3,a4,-8
  88              		.loc 1 19 5
  89 0040 93071000 		li	a5,1
  90 0044 63FAD702 		bleu	a3,a5,.L8
  91              	.LBE32:
  20:src/riscv.cpp ****     {
  21:src/riscv.cpp ****         // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
  22:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
  23:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  24:src/riscv.cpp **** 
  25:src/riscv.cpp ****         uint64 volatile sysCallNum;
  26:src/riscv.cpp ****         __asm__ volatile("sd a0, %0" : "=m" (sysCallNum));
  27:src/riscv.cpp ****         printString("\na0 = "); printInteger(sysCallNum);
  28:src/riscv.cpp ****         uint64 volatile arg1;
  29:src/riscv.cpp ****         __asm__ volatile("sd a0, %0" : "=m" (arg1));
  30:src/riscv.cpp ****         printString("\na1 = "); printInteger(arg1);
  31:src/riscv.cpp **** 
  32:src/riscv.cpp ****         TCB::timeSliceCounter = 0;
  33:src/riscv.cpp ****         TCB::dispatch();
  34:src/riscv.cpp ****         w_sstatus(sstatus);
  35:src/riscv.cpp ****         w_sepc(sepc);
  36:src/riscv.cpp ****     }
  37:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL)
  92              		.loc 1 37 10 is_stmt 1
  93              	.LBB59:
  94              	.LBB33:
  95 0048 9307F0FF 		li	a5,-1
  96 004c 9397F703 		slli	a5,a5,63
  97 0050 93871700 		addi	a5,a5,1
  98 0054 6308F70A 		beq	a4,a5,.L9
  38:src/riscv.cpp ****     {
  39:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
  40:src/riscv.cpp ****         mc_sip(SIP_SSIP);
  41:src/riscv.cpp ****         TCB::timeSliceCounter++;
  42:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
GAS LISTING /tmp/ccV9AulW.s 			page 5


  43:src/riscv.cpp ****         {
  44:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
  45:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
  46:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
  47:src/riscv.cpp ****             TCB::dispatch();
  48:src/riscv.cpp ****             w_sstatus(sstatus);
  49:src/riscv.cpp ****             w_sepc(sepc);
  50:src/riscv.cpp ****         }
  51:src/riscv.cpp ****     }
  52:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL)
  99              		.loc 1 52 10
 100 0058 9307F0FF 		li	a5,-1
 101 005c 9397F703 		slli	a5,a5,63
 102 0060 93879700 		addi	a5,a5,9
 103 0064 630CF710 		beq	a4,a5,.L10
 104              	.LVL1:
 105              	.L3:
 106              	.LBE33:
 107              	.LBE59:
  53:src/riscv.cpp ****     {
  54:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard)
  55:src/riscv.cpp ****         console_handler();
  56:src/riscv.cpp ****     }
  57:src/riscv.cpp ****     else
  58:src/riscv.cpp ****     {
  59:src/riscv.cpp ****         // unexpected trap cause
  60:src/riscv.cpp ****     }
  61:src/riscv.cpp **** }...
 108              		.loc 1 61 1 is_stmt 0
 109 0068 83308106 		ld	ra,104(sp)
 110              		.cfi_remember_state
 111              		.cfi_restore 1
 112 006c 03340106 		ld	s0,96(sp)
 113              		.cfi_restore 8
 114              		.cfi_def_cfa 2, 112
 115 0070 13010107 		addi	sp,sp,112
 116              		.cfi_def_cfa_offset 0
 117 0074 67800000 		jr	ra
 118              	.LVL2:
 119              	.L8:
 120              		.cfi_restore_state
 121              	.LBB60:
 122              	.LBB49:
  22:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 123              		.loc 1 22 9 is_stmt 1
 124              	.LBB50:
 125              	.LBB51:
  90:src/../h/riscv.hpp **** }
  91:src/../h/riscv.hpp **** 
  92:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
  93:src/../h/riscv.hpp **** {
  94:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
  95:src/../h/riscv.hpp **** }
  96:src/../h/riscv.hpp **** 
  97:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
  98:src/../h/riscv.hpp **** {
  99:src/../h/riscv.hpp ****     uint64 volatile sepc;
GAS LISTING /tmp/ccV9AulW.s 			page 6


 126              		.loc 2 99 5
 100:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 127              		.loc 2 100 5
 128              		.loc 2 100 64 is_stmt 0
 129              	#APP
 130              	# 100 "src/../h/riscv.hpp" 1
 101              	    return sepc;
 131              		csrr a5, sepc
 132              	# 0 "" 2
 133              	#NO_APP
 134 007c 233CF4FC 		sd	a5,-40(s0)
 135              		.loc 2 101 5 is_stmt 1
 136              		.loc 2 101 12 is_stmt 0
 137 0080 833784FD 		ld	a5,-40(s0)
 138              	.LBE51:
 139              	.LBE50:
  22:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 140              		.loc 1 22 41
 141 0084 93874700 		addi	a5,a5,4
  22:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 142              		.loc 1 22 43
 143 0088 233CF4F8 		sd	a5,-104(s0)
  23:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 144              		.loc 1 23 9 is_stmt 1
 145              	.LBB52:
 146              	.LBB53:
 102:src/../h/riscv.hpp **** }
 103:src/../h/riscv.hpp **** 
 104:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 105:src/../h/riscv.hpp **** {
 106:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 107:src/../h/riscv.hpp **** }
 108:src/../h/riscv.hpp **** 
 109:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 110:src/../h/riscv.hpp **** {
 111:src/../h/riscv.hpp ****     uint64 volatile stvec;
 112:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 113:src/../h/riscv.hpp ****     return stvec;
 114:src/../h/riscv.hpp **** }
 115:src/../h/riscv.hpp **** 
 116:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 117:src/../h/riscv.hpp **** {
 118:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 119:src/../h/riscv.hpp **** }
 120:src/../h/riscv.hpp **** 
 121:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 122:src/../h/riscv.hpp **** {
 123:src/../h/riscv.hpp ****     uint64 volatile stval;
 124:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 125:src/../h/riscv.hpp ****     return stval;
 126:src/../h/riscv.hpp **** }
 127:src/../h/riscv.hpp **** 
 128:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 129:src/../h/riscv.hpp **** {
 130:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 131:src/../h/riscv.hpp **** }
 132:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccV9AulW.s 			page 7


 133:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 134:src/../h/riscv.hpp **** {
 135:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 136:src/../h/riscv.hpp **** }
 137:src/../h/riscv.hpp **** 
 138:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 139:src/../h/riscv.hpp **** {
 140:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 141:src/../h/riscv.hpp **** }
 142:src/../h/riscv.hpp **** 
 143:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 144:src/../h/riscv.hpp **** {
 145:src/../h/riscv.hpp ****     uint64 volatile sip;
 146:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 147:src/../h/riscv.hpp ****     return sip;
 148:src/../h/riscv.hpp **** }
 149:src/../h/riscv.hpp **** 
 150:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 151:src/../h/riscv.hpp **** {
 152:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 153:src/../h/riscv.hpp **** }
 154:src/../h/riscv.hpp **** 
 155:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 156:src/../h/riscv.hpp **** {
 157:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 158:src/../h/riscv.hpp **** }
 159:src/../h/riscv.hpp **** 
 160:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 161:src/../h/riscv.hpp **** {
 162:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 163:src/../h/riscv.hpp **** }
 164:src/../h/riscv.hpp **** 
 165:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 166:src/../h/riscv.hpp **** {
 167:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 147              		.loc 2 167 5
 168:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 148              		.loc 2 168 5
 149              		.loc 2 168 76 is_stmt 0
 150              	#APP
 151              	# 168 "src/../h/riscv.hpp" 1
 169              	    return sstatus;
 152              		csrr a5, sstatus
 153              	# 0 "" 2
 154              	#NO_APP
 155 0090 2338F4FC 		sd	a5,-48(s0)
 156              		.loc 2 169 5 is_stmt 1
 157              		.loc 2 169 12 is_stmt 0
 158 0094 833704FD 		ld	a5,-48(s0)
 159              	.LBE53:
 160              	.LBE52:
  23:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 161              		.loc 1 23 45
 162 0098 2330F4FA 		sd	a5,-96(s0)
  25:src/riscv.cpp ****         uint64 volatile sysCallNum;
 163              		.loc 1 25 9 is_stmt 1
  26:src/riscv.cpp ****         __asm__ volatile("sd a0, %0" : "=m" (sysCallNum));
GAS LISTING /tmp/ccV9AulW.s 			page 8


 164              		.loc 1 26 9
  26:src/riscv.cpp ****         __asm__ volatile("sd a0, %0" : "=m" (sysCallNum));
 165              		.loc 1 26 58 is_stmt 0
 166              	#APP
 167              	# 26 "src/riscv.cpp" 1
  27:src/riscv.cpp ****         printString("\na0 = "); printInteger(sysCallNum);
 168              		sd a0, -88(s0)
 169              	# 0 "" 2
 170              		.loc 1 27 9 is_stmt 1
  27:src/riscv.cpp ****         printString("\na0 = "); printInteger(sysCallNum);
 171              		.loc 1 27 20 is_stmt 0
 172              	#NO_APP
 173 00a0 17050000 		lla	a0,.LC0
 173      13050500 
 174 00a8 97000000 		call	_Z11printStringPKc@plt
 174      E7800000 
 175              	.LVL3:
  27:src/riscv.cpp ****         printString("\na0 = "); printInteger(sysCallNum);
 176              		.loc 1 27 33 is_stmt 1
  27:src/riscv.cpp ****         printString("\na0 = "); printInteger(sysCallNum);
 177              		.loc 1 27 45 is_stmt 0
 178 00b0 033584FA 		ld	a0,-88(s0)
 179 00b4 97000000 		call	_Z12printIntegerm@plt
 179      E7800000 
 180              	.LVL4:
  28:src/riscv.cpp ****         uint64 volatile arg1;
 181              		.loc 1 28 9 is_stmt 1
  29:src/riscv.cpp ****         __asm__ volatile("sd a0, %0" : "=m" (arg1));
 182              		.loc 1 29 9
  29:src/riscv.cpp ****         __asm__ volatile("sd a0, %0" : "=m" (arg1));
 183              		.loc 1 29 52 is_stmt 0
 184              	#APP
 185              	# 29 "src/riscv.cpp" 1
  30:src/riscv.cpp ****         printString("\na1 = "); printInteger(arg1);
 186              		sd a0, -80(s0)
 187              	# 0 "" 2
 188              		.loc 1 30 9 is_stmt 1
  30:src/riscv.cpp ****         printString("\na1 = "); printInteger(arg1);
 189              		.loc 1 30 20 is_stmt 0
 190              	#NO_APP
 191 00c0 17050000 		lla	a0,.LC1
 191      13050500 
 192 00c8 97000000 		call	_Z11printStringPKc@plt
 192      E7800000 
 193              	.LVL5:
  30:src/riscv.cpp ****         printString("\na1 = "); printInteger(arg1);
 194              		.loc 1 30 33 is_stmt 1
  30:src/riscv.cpp ****         printString("\na1 = "); printInteger(arg1);
 195              		.loc 1 30 45 is_stmt 0
 196 00d0 033504FB 		ld	a0,-80(s0)
 197 00d4 97000000 		call	_Z12printIntegerm@plt
 197      E7800000 
 198              	.LVL6:
  32:src/riscv.cpp ****         TCB::timeSliceCounter = 0;
 199              		.loc 1 32 9 is_stmt 1
  32:src/riscv.cpp ****         TCB::timeSliceCounter = 0;
 200              		.loc 1 32 31 is_stmt 0
GAS LISTING /tmp/ccV9AulW.s 			page 9


 201 00dc 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 201      83B70700 
 202 00e4 23B00700 		sd	zero,0(a5)
  33:src/riscv.cpp ****         TCB::dispatch();
 203              		.loc 1 33 9 is_stmt 1
  33:src/riscv.cpp ****         TCB::dispatch();
 204              		.loc 1 33 22 is_stmt 0
 205 00e8 97000000 		call	_ZN3TCB8dispatchEv@plt
 205      E7800000 
 206              	.LVL7:
  34:src/riscv.cpp ****         w_sstatus(sstatus);
 207              		.loc 1 34 9 is_stmt 1
  34:src/riscv.cpp ****         w_sstatus(sstatus);
 208              		.loc 1 34 18 is_stmt 0
 209 00f0 833704FA 		ld	a5,-96(s0)
 210              	.LVL8:
 211              	.LBB54:
 212              	.LBB55:
 170:src/../h/riscv.hpp **** }
 171:src/../h/riscv.hpp **** 
 172:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 173:src/../h/riscv.hpp **** {
 174:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 213              		.loc 2 174 5 is_stmt 1
 214              		.loc 2 174 77 is_stmt 0
 215              	#APP
 216              	# 174 "src/../h/riscv.hpp" 1
 175              	}
 217              		csrw sstatus, a5
 218              	# 0 "" 2
 219              	.LVL9:
 220              	#NO_APP
 221              	.LBE55:
 222              	.LBE54:
  35:src/riscv.cpp ****         w_sepc(sepc);
 223              		.loc 1 35 9 is_stmt 1
  35:src/riscv.cpp ****         w_sepc(sepc);
 224              		.loc 1 35 15 is_stmt 0
 225 00f8 833784F9 		ld	a5,-104(s0)
 226              	.LVL10:
 227              	.LBB56:
 228              	.LBB57:
 106:src/../h/riscv.hpp **** }
 229              		.loc 2 106 5 is_stmt 1
 106:src/../h/riscv.hpp **** }
 230              		.loc 2 106 65 is_stmt 0
 231              	#APP
 232              	# 106 "src/../h/riscv.hpp" 1
 107:src/../h/riscv.hpp **** 
 233              		csrw sepc, a5
 234              	# 0 "" 2
 235              		.loc 2 107 1
 236              	#NO_APP
 237 0100 6FF09FF6 		j	.L3
 238              	.LVL11:
 239              	.L9:
 240              	.LBE57:
GAS LISTING /tmp/ccV9AulW.s 			page 10


 241              	.LBE56:
 242              	.LBE49:
 243              	.LBB58:
 244              	.LBB34:
  40:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 245              		.loc 1 40 9 is_stmt 1
 246              	.LBB35:
 247              	.LBB36:
 140:src/../h/riscv.hpp **** }
 248              		.loc 2 140 5
 140:src/../h/riscv.hpp **** }
 249              		.loc 2 140 64 is_stmt 0
 250 0104 93072000 		li	a5,2
 251              	#APP
 252              	# 140 "src/../h/riscv.hpp" 1
 253              		csrc sip, a5
 254              	# 0 "" 2
 255              	.LVL12:
 256              	#NO_APP
 257              	.LBE36:
 258              	.LBE35:
  41:src/riscv.cpp ****         TCB::timeSliceCounter++;
 259              		.loc 1 41 9 is_stmt 1
  41:src/riscv.cpp ****         TCB::timeSliceCounter++;
 260              		.loc 1 41 30 is_stmt 0
 261 010c 17070000 		la	a4,_ZN3TCB16timeSliceCounterE
 261      03370700 
 262              	.LVL13:
 263 0114 83370700 		ld	a5,0(a4)
 264 0118 93871700 		addi	a5,a5,1
 265 011c 2330F700 		sd	a5,0(a4)
  42:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 266              		.loc 1 42 9 is_stmt 1
 267              	.LBB37:
  42:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 268              		.loc 1 42 64 is_stmt 0
 269 0120 17070000 		la	a4,_ZN3TCB7runningE
 269      03370700 
 270 0128 03370700 		ld	a4,0(a4)
 271              	.LVL14:
 272              	.LBB38:
 273              	.LBB39:
 274              		.file 3 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** #ifndef TCB_HPP
   2:src/../h/tcb.hpp **** #define TCB_HPP
   3:src/../h/tcb.hpp **** 
   4:src/../h/tcb.hpp **** #include "../lib/hw.h"
   5:src/../h/tcb.hpp **** #include "scheduler.hpp"
   6:src/../h/tcb.hpp **** 
   7:src/../h/tcb.hpp **** // Thread Control Block
   8:src/../h/tcb.hpp **** class TCB
   9:src/../h/tcb.hpp **** {
  10:src/../h/tcb.hpp **** public:
  11:src/../h/tcb.hpp ****     ~TCB() { delete[] stack; }
  12:src/../h/tcb.hpp **** 
  13:src/../h/tcb.hpp ****     bool isFinished() const { return finished; }
  14:src/../h/tcb.hpp **** 
GAS LISTING /tmp/ccV9AulW.s 			page 11


  15:src/../h/tcb.hpp ****     void setFinished(bool value) { finished = value; }
  16:src/../h/tcb.hpp **** 
  17:src/../h/tcb.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
 275              		.loc 3 17 35 is_stmt 1
 276              		.loc 3 17 42 is_stmt 0
 277 012c 03370702 		ld	a4,32(a4)
 278              	.LVL15:
 279              	.LBE39:
 280              	.LBE38:
  42:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 281              		.loc 1 42 9
 282 0130 E3ECE7F2 		bltu	a5,a4,.L3
 283              	.LBB40:
  44:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 284              		.loc 1 44 13 is_stmt 1
 285              	.LBB41:
 286              	.LBB42:
  99:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 287              		.loc 2 99 5
 100:src/../h/riscv.hpp ****     return sepc;
 288              		.loc 2 100 5
 100:src/../h/riscv.hpp ****     return sepc;
 289              		.loc 2 100 64 is_stmt 0
 290              	#APP
 291              	# 100 "src/../h/riscv.hpp" 1
 292              		csrr a5, sepc
 293              	# 0 "" 2
 294              	#NO_APP
 295 0138 2334F4FE 		sd	a5,-24(s0)
 101:src/../h/riscv.hpp **** }
 296              		.loc 2 101 5 is_stmt 1
 101:src/../h/riscv.hpp **** }
 297              		.loc 2 101 12 is_stmt 0
 298 013c 833784FE 		ld	a5,-24(s0)
 299              	.LBE42:
 300              	.LBE41:
  44:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 301              		.loc 1 44 43
 302 0140 233CF4FA 		sd	a5,-72(s0)
  45:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 303              		.loc 1 45 13 is_stmt 1
 304              	.LBB43:
 305              	.LBB44:
 167:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 306              		.loc 2 167 5
 168:src/../h/riscv.hpp ****     return sstatus;
 307              		.loc 2 168 5
 168:src/../h/riscv.hpp ****     return sstatus;
 308              		.loc 2 168 76 is_stmt 0
 309              	#APP
 310              	# 168 "src/../h/riscv.hpp" 1
 311              		csrr a5, sstatus
 312              	# 0 "" 2
 313              	#NO_APP
 314 0148 2330F4FE 		sd	a5,-32(s0)
 169:src/../h/riscv.hpp **** }
 315              		.loc 2 169 5 is_stmt 1
GAS LISTING /tmp/ccV9AulW.s 			page 12


 169:src/../h/riscv.hpp **** }
 316              		.loc 2 169 12 is_stmt 0
 317 014c 833704FE 		ld	a5,-32(s0)
 318              	.LBE44:
 319              	.LBE43:
  45:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 320              		.loc 1 45 49
 321 0150 2330F4FC 		sd	a5,-64(s0)
  46:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 322              		.loc 1 46 13 is_stmt 1
  46:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 323              		.loc 1 46 35 is_stmt 0
 324 0154 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 324      83B70700 
 325 015c 23B00700 		sd	zero,0(a5)
  47:src/riscv.cpp ****             TCB::dispatch();
 326              		.loc 1 47 13 is_stmt 1
  47:src/riscv.cpp ****             TCB::dispatch();
 327              		.loc 1 47 26 is_stmt 0
 328 0160 97000000 		call	_ZN3TCB8dispatchEv@plt
 328      E7800000 
 329              	.LVL16:
  48:src/riscv.cpp ****             w_sstatus(sstatus);
 330              		.loc 1 48 13 is_stmt 1
  48:src/riscv.cpp ****             w_sstatus(sstatus);
 331              		.loc 1 48 22 is_stmt 0
 332 0168 833704FC 		ld	a5,-64(s0)
 333              	.LVL17:
 334              	.LBB45:
 335              	.LBB46:
 174:src/../h/riscv.hpp **** }
 336              		.loc 2 174 5 is_stmt 1
 174:src/../h/riscv.hpp **** }
 337              		.loc 2 174 77 is_stmt 0
 338              	#APP
 339              	# 174 "src/../h/riscv.hpp" 1
 340              		csrw sstatus, a5
 341              	# 0 "" 2
 342              	.LVL18:
 343              	#NO_APP
 344              	.LBE46:
 345              	.LBE45:
  49:src/riscv.cpp ****             w_sepc(sepc);
 346              		.loc 1 49 13 is_stmt 1
  49:src/riscv.cpp ****             w_sepc(sepc);
 347              		.loc 1 49 19 is_stmt 0
 348 0170 833784FB 		ld	a5,-72(s0)
 349              	.LVL19:
 350              	.LBB47:
 351              	.LBB48:
 106:src/../h/riscv.hpp **** }
 352              		.loc 2 106 5 is_stmt 1
 106:src/../h/riscv.hpp **** }
 353              		.loc 2 106 65 is_stmt 0
 354              	#APP
 355              	# 106 "src/../h/riscv.hpp" 1
 107:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccV9AulW.s 			page 13


 356              		csrw sepc, a5
 357              	# 0 "" 2
 358              		.loc 2 107 1
 359              	#NO_APP
 360 0178 6FF01FEF 		j	.L3
 361              	.LVL20:
 362              	.L10:
 363              	.LBE48:
 364              	.LBE47:
 365              	.LBE40:
 366              	.LBE37:
 367              	.LBE34:
  55:src/riscv.cpp ****         console_handler();
 368              		.loc 1 55 9 is_stmt 1
  55:src/riscv.cpp ****         console_handler();
 369              		.loc 1 55 24 is_stmt 0
 370 017c 97000000 		call	console_handler@plt
 370      E7800000 
 371              	.LVL21:
 372              	.LBE58:
 373              	.LBE60:
 374              		.loc 1 61 1
 375 0184 6FF05FEE 		j	.L3
 376              		.cfi_endproc
 377              	.LFE34:
 379              	.Letext0:
 380              		.file 4 "src/../h/../lib/hw.h"
 381              		.file 5 "src/../h/print.hpp"
 382              		.file 6 "src/../lib/console.h"
GAS LISTING /tmp/ccV9AulW.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccV9AulW.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccV9AulW.s:13     .text:0000000000000000 .L0 
     /tmp/ccV9AulW.s:14     .text:0000000000000000 .L0 
     /tmp/ccV9AulW.s:15     .text:0000000000000004 .L0 
     /tmp/ccV9AulW.s:17     .text:0000000000000008 .L0 
     /tmp/ccV9AulW.s:19     .text:000000000000000c .L0 
     /tmp/ccV9AulW.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:12     .text:000000000000000c .L0 
     /tmp/ccV9AulW.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:13     .text:0000000000000010 .L0 
     /tmp/ccV9AulW.s:33     .text:0000000000000014 .L0 
     /tmp/ccV9AulW.s:34     .text:0000000000000018 .L0 
     /tmp/ccV9AulW.s:35     .text:0000000000000018 .L0 
     /tmp/ccV9AulW.s:37     .text:000000000000001c .L0 
     /tmp/ccV9AulW.s:39     .text:0000000000000020 .L0 
     /tmp/ccV9AulW.s:53     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccV9AulW.s:56     .text:0000000000000020 .L0 
     /tmp/ccV9AulW.s:57     .text:0000000000000020 .L0 
     /tmp/ccV9AulW.s:58     .text:0000000000000024 .L0 
     /tmp/ccV9AulW.s:61     .text:000000000000002c .L0 
     /tmp/ccV9AulW.s:62     .text:000000000000002c .L0 
     /tmp/ccV9AulW.s:64     .text:0000000000000030 .L0 
     /tmp/ccV9AulW.s:69     .text:0000000000000030 .L0 
     /tmp/ccV9AulW.s:70     .text:0000000000000030 .L0 
     /tmp/ccV9AulW.s:71     .text:0000000000000030 .L0 
  src/../h/riscv.hpp:88     .text:0000000000000030 .L0 
     /tmp/ccV9AulW.s:79     .text:0000000000000038 .L0 
     /tmp/ccV9AulW.s:80     .text:0000000000000038 .L0 
     /tmp/ccV9AulW.s:86     .text:000000000000003c .L0 
     /tmp/ccV9AulW.s:87     .text:000000000000003c .L0 
     /tmp/ccV9AulW.s:89     .text:0000000000000040 .L0 
     /tmp/ccV9AulW.s:95     .text:0000000000000048 .L0 
     /tmp/ccV9AulW.s:100    .text:0000000000000058 .L0 
     /tmp/ccV9AulW.s:109    .text:0000000000000068 .L0 
     /tmp/ccV9AulW.s:110    .text:000000000000006c .L0 
     /tmp/ccV9AulW.s:111    .text:000000000000006c .L0 
     /tmp/ccV9AulW.s:113    .text:0000000000000070 .L0 
     /tmp/ccV9AulW.s:114    .text:0000000000000070 .L0 
     /tmp/ccV9AulW.s:116    .text:0000000000000074 .L0 
     /tmp/ccV9AulW.s:120    .text:0000000000000078 .L0 
     /tmp/ccV9AulW.s:126    .text:0000000000000078 .L0 
     /tmp/ccV9AulW.s:127    .text:0000000000000078 .L0 
     /tmp/ccV9AulW.s:128    .text:0000000000000078 .L0 
  src/../h/riscv.hpp:100    .text:0000000000000078 .L0 
     /tmp/ccV9AulW.s:136    .text:0000000000000080 .L0 
     /tmp/ccV9AulW.s:137    .text:0000000000000080 .L0 
     /tmp/ccV9AulW.s:141    .text:0000000000000084 .L0 
     /tmp/ccV9AulW.s:143    .text:0000000000000088 .L0 
     /tmp/ccV9AulW.s:147    .text:000000000000008c .L0 
     /tmp/ccV9AulW.s:148    .text:000000000000008c .L0 
     /tmp/ccV9AulW.s:149    .text:000000000000008c .L0 
  src/../h/riscv.hpp:168    .text:000000000000008c .L0 
     /tmp/ccV9AulW.s:157    .text:0000000000000094 .L0 
     /tmp/ccV9AulW.s:158    .text:0000000000000094 .L0 
     /tmp/ccV9AulW.s:162    .text:0000000000000098 .L0 
GAS LISTING /tmp/ccV9AulW.s 			page 15


     /tmp/ccV9AulW.s:164    .text:000000000000009c .L0 
     /tmp/ccV9AulW.s:165    .text:000000000000009c .L0 
       src/riscv.cpp:26     .text:000000000000009c .L0 
     /tmp/ccV9AulW.s:171    .text:00000000000000a0 .L0 
     /tmp/ccV9AulW.s:173    .text:00000000000000a0 .L0 
     /tmp/ccV9AulW.s:177    .text:00000000000000b0 .L0 
     /tmp/ccV9AulW.s:178    .text:00000000000000b0 .L0 
     /tmp/ccV9AulW.s:182    .text:00000000000000bc .L0 
     /tmp/ccV9AulW.s:183    .text:00000000000000bc .L0 
       src/riscv.cpp:29     .text:00000000000000bc .L0 
     /tmp/ccV9AulW.s:189    .text:00000000000000c0 .L0 
     /tmp/ccV9AulW.s:191    .text:00000000000000c0 .L0 
     /tmp/ccV9AulW.s:195    .text:00000000000000d0 .L0 
     /tmp/ccV9AulW.s:196    .text:00000000000000d0 .L0 
     /tmp/ccV9AulW.s:200    .text:00000000000000dc .L0 
     /tmp/ccV9AulW.s:201    .text:00000000000000dc .L0 
     /tmp/ccV9AulW.s:204    .text:00000000000000e8 .L0 
     /tmp/ccV9AulW.s:205    .text:00000000000000e8 .L0 
     /tmp/ccV9AulW.s:208    .text:00000000000000f0 .L0 
     /tmp/ccV9AulW.s:209    .text:00000000000000f0 .L0 
     /tmp/ccV9AulW.s:214    .text:00000000000000f4 .L0 
  src/../h/riscv.hpp:174    .text:00000000000000f4 .L0 
     /tmp/ccV9AulW.s:224    .text:00000000000000f8 .L0 
     /tmp/ccV9AulW.s:225    .text:00000000000000f8 .L0 
     /tmp/ccV9AulW.s:230    .text:00000000000000fc .L0 
  src/../h/riscv.hpp:106    .text:00000000000000fc .L0 
     /tmp/ccV9AulW.s:237    .text:0000000000000100 .L0 
     /tmp/ccV9AulW.s:248    .text:0000000000000104 .L0 
     /tmp/ccV9AulW.s:249    .text:0000000000000104 .L0 
     /tmp/ccV9AulW.s:250    .text:0000000000000104 .L0 
     /tmp/ccV9AulW.s:260    .text:000000000000010c .L0 
     /tmp/ccV9AulW.s:261    .text:000000000000010c .L0 
     /tmp/ccV9AulW.s:268    .text:0000000000000120 .L0 
     /tmp/ccV9AulW.s:269    .text:0000000000000120 .L0 
     /tmp/ccV9AulW.s:276    .text:000000000000012c .L0 
     /tmp/ccV9AulW.s:277    .text:000000000000012c .L0 
     /tmp/ccV9AulW.s:282    .text:0000000000000130 .L0 
     /tmp/ccV9AulW.s:287    .text:0000000000000134 .L0 
     /tmp/ccV9AulW.s:288    .text:0000000000000134 .L0 
     /tmp/ccV9AulW.s:289    .text:0000000000000134 .L0 
  src/../h/riscv.hpp:100    .text:0000000000000134 .L0 
     /tmp/ccV9AulW.s:297    .text:000000000000013c .L0 
     /tmp/ccV9AulW.s:298    .text:000000000000013c .L0 
     /tmp/ccV9AulW.s:302    .text:0000000000000140 .L0 
     /tmp/ccV9AulW.s:306    .text:0000000000000144 .L0 
     /tmp/ccV9AulW.s:307    .text:0000000000000144 .L0 
     /tmp/ccV9AulW.s:308    .text:0000000000000144 .L0 
  src/../h/riscv.hpp:168    .text:0000000000000144 .L0 
     /tmp/ccV9AulW.s:316    .text:000000000000014c .L0 
     /tmp/ccV9AulW.s:317    .text:000000000000014c .L0 
     /tmp/ccV9AulW.s:321    .text:0000000000000150 .L0 
     /tmp/ccV9AulW.s:323    .text:0000000000000154 .L0 
     /tmp/ccV9AulW.s:324    .text:0000000000000154 .L0 
     /tmp/ccV9AulW.s:327    .text:0000000000000160 .L0 
     /tmp/ccV9AulW.s:328    .text:0000000000000160 .L0 
     /tmp/ccV9AulW.s:331    .text:0000000000000168 .L0 
     /tmp/ccV9AulW.s:332    .text:0000000000000168 .L0 
GAS LISTING /tmp/ccV9AulW.s 			page 16


     /tmp/ccV9AulW.s:337    .text:000000000000016c .L0 
  src/../h/riscv.hpp:174    .text:000000000000016c .L0 
     /tmp/ccV9AulW.s:347    .text:0000000000000170 .L0 
     /tmp/ccV9AulW.s:348    .text:0000000000000170 .L0 
     /tmp/ccV9AulW.s:353    .text:0000000000000174 .L0 
  src/../h/riscv.hpp:106    .text:0000000000000174 .L0 
     /tmp/ccV9AulW.s:360    .text:0000000000000178 .L0 
     /tmp/ccV9AulW.s:369    .text:000000000000017c .L0 
     /tmp/ccV9AulW.s:370    .text:000000000000017c .L0 
     /tmp/ccV9AulW.s:375    .text:0000000000000184 .L0 
     /tmp/ccV9AulW.s:376    .text:0000000000000188 .L0 
     /tmp/ccV9AulW.s:383    .text:0000000000000188 .L0 
     /tmp/ccV9AulW.s:44     .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccV9AulW.s:173    .text:00000000000000a0 .L0 
     /tmp/ccV9AulW.s:47     .rodata.str1.8:0000000000000008 .LC1
     /tmp/ccV9AulW.s:191    .text:00000000000000c0 .L0 
     /tmp/ccV9AulW.s:201    .text:00000000000000dc .L0 
     /tmp/ccV9AulW.s:261    .text:000000000000010c .L0 
     /tmp/ccV9AulW.s:269    .text:0000000000000120 .L0 
     /tmp/ccV9AulW.s:324    .text:0000000000000154 .L0 
     /tmp/ccV9AulW.s:119    .text:0000000000000078 .L8
     /tmp/ccV9AulW.s:239    .text:0000000000000104 .L9
     /tmp/ccV9AulW.s:362    .text:000000000000017c .L10
     /tmp/ccV9AulW.s:105    .text:0000000000000068 .L3
     /tmp/ccV9AulW.s:1329   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccV9AulW.s:2433   .debug_str:0000000000000503 .LASF94
     /tmp/ccV9AulW.s:2389   .debug_str:00000000000003a6 .LASF95
     /tmp/ccV9AulW.s:2395   .debug_str:00000000000003ce .LASF96
     /tmp/ccV9AulW.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccV9AulW.s:379    .text:0000000000000188 .Letext0
     /tmp/ccV9AulW.s:2251   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccV9AulW.s:2367   .debug_str:0000000000000334 .LASF0
     /tmp/ccV9AulW.s:2385   .debug_str:0000000000000380 .LASF1
     /tmp/ccV9AulW.s:2355   .debug_str:00000000000002e0 .LASF2
     /tmp/ccV9AulW.s:2333   .debug_str:000000000000024b .LASF4
     /tmp/ccV9AulW.s:2413   .debug_str:000000000000046c .LASF3
     /tmp/ccV9AulW.s:2273   .debug_str:000000000000006a .LASF5
     /tmp/ccV9AulW.s:2387   .debug_str:0000000000000393 .LASF6
     /tmp/ccV9AulW.s:2365   .debug_str:0000000000000321 .LASF7
     /tmp/ccV9AulW.s:2439   .debug_str:00000000000005e8 .LASF8
     /tmp/ccV9AulW.s:2321   .debug_str:00000000000001d0 .LASF9
     /tmp/ccV9AulW.s:2393   .debug_str:00000000000003bf .LASF10
     /tmp/ccV9AulW.s:2435   .debug_str:00000000000005c7 .LASF11
     /tmp/ccV9AulW.s:2275   .debug_str:0000000000000071 .LASF12
     /tmp/ccV9AulW.s:2255   .debug_str:0000000000000008 .LASF13
     /tmp/ccV9AulW.s:2283   .debug_str:00000000000000bb .LASF14
     /tmp/ccV9AulW.s:2407   .debug_str:0000000000000438 .LASF15
     /tmp/ccV9AulW.s:2289   .debug_str:00000000000000df .LASF16
     /tmp/ccV9AulW.s:2381   .debug_str:000000000000036f .LASF56
     /tmp/ccV9AulW.s:2345   .debug_str:0000000000000293 .LASF97
     /tmp/ccV9AulW.s:2423   .debug_str:00000000000004b6 .LASF17
     /tmp/ccV9AulW.s:2379   .debug_str:0000000000000366 .LASF18
     /tmp/ccV9AulW.s:2339   .debug_str:0000000000000260 .LASF19
     /tmp/ccV9AulW.s:2405   .debug_str:000000000000042d .LASF52
     /tmp/ccV9AulW.s:2453   .debug_str:0000000000000657 .LASF54
     /tmp/ccV9AulW.s:2257   .debug_str:0000000000000018 .LASF20
     /tmp/ccV9AulW.s:2303   .debug_str:0000000000000152 .LASF22
GAS LISTING /tmp/ccV9AulW.s 			page 17


     /tmp/ccV9AulW.s:2299   .debug_str:0000000000000141 .LASF24
     /tmp/ccV9AulW.s:2297   .debug_str:000000000000012c .LASF26
     /tmp/ccV9AulW.s:2417   .debug_str:000000000000048f .LASF21
     /tmp/ccV9AulW.s:2397   .debug_str:0000000000000401 .LASF23
     /tmp/ccV9AulW.s:2431   .debug_str:00000000000004fc .LASF25
     /tmp/ccV9AulW.s:2427   .debug_str:00000000000004d7 .LASF27
     /tmp/ccV9AulW.s:2313   .debug_str:00000000000001a6 .LASF28
     /tmp/ccV9AulW.s:2291   .debug_str:00000000000000f5 .LASF29
     /tmp/ccV9AulW.s:2253   .debug_str:0000000000000000 .LASF30
     /tmp/ccV9AulW.s:2325   .debug_str:00000000000001f4 .LASF31
     /tmp/ccV9AulW.s:2271   .debug_str:0000000000000062 .LASF32
     /tmp/ccV9AulW.s:2277   .debug_str:0000000000000081 .LASF33
     /tmp/ccV9AulW.s:2457   .debug_str:000000000000067a .LASF34
     /tmp/ccV9AulW.s:2305   .debug_str:0000000000000167 .LASF35
     /tmp/ccV9AulW.s:2369   .debug_str:0000000000000341 .LASF36
     /tmp/ccV9AulW.s:2449   .debug_str:000000000000063f .LASF37
     /tmp/ccV9AulW.s:2267   .debug_str:0000000000000042 .LASF38
     /tmp/ccV9AulW.s:2311   .debug_str:0000000000000193 .LASF39
     /tmp/ccV9AulW.s:2317   .debug_str:00000000000001b3 .LASF40
     /tmp/ccV9AulW.s:2429   .debug_str:00000000000004ea .LASF41
     /tmp/ccV9AulW.s:2265   .debug_str:000000000000003c .LASF42
     /tmp/ccV9AulW.s:2463   .debug_str:000000000000069e .LASF43
     /tmp/ccV9AulW.s:2455   .debug_str:000000000000066f .LASF44
     /tmp/ccV9AulW.s:2411   .debug_str:0000000000000454 .LASF45
     /tmp/ccV9AulW.s:2383   .debug_str:0000000000000375 .LASF46
     /tmp/ccV9AulW.s:2425   .debug_str:00000000000004bf .LASF47
     /tmp/ccV9AulW.s:2281   .debug_str:00000000000000b1 .LASF48
     /tmp/ccV9AulW.s:2329   .debug_str:000000000000020d .LASF49
     /tmp/ccV9AulW.s:2359   .debug_str:00000000000002fa .LASF50
     /tmp/ccV9AulW.s:2323   .debug_str:00000000000001de .LASF51
     /tmp/ccV9AulW.s:2419   .debug_str:0000000000000496 .LASF53
     /tmp/ccV9AulW.s:2279   .debug_str:0000000000000095 .LASF55
     /tmp/ccV9AulW.s:2441   .debug_str:00000000000005f8 .LASF74
     /tmp/ccV9AulW.s:2343   .debug_str:0000000000000271 .LASF76
     /tmp/ccV9AulW.s:2263   .debug_str:0000000000000034 .LASF98
     /tmp/ccV9AulW.s:2327   .debug_str:0000000000000208 .LASF57
     /tmp/ccV9AulW.s:2399   .debug_str:0000000000000414 .LASF59
     /tmp/ccV9AulW.s:2391   .debug_str:00000000000003b4 .LASF61
     /tmp/ccV9AulW.s:2319   .debug_str:00000000000001b9 .LASF63
     /tmp/ccV9AulW.s:2357   .debug_str:00000000000002ee .LASF58
     /tmp/ccV9AulW.s:2459   .debug_str:0000000000000682 .LASF60
     /tmp/ccV9AulW.s:2351   .debug_str:00000000000002c5 .LASF62
     /tmp/ccV9AulW.s:2269   .debug_str:0000000000000049 .LASF64
     /tmp/ccV9AulW.s:2287   .debug_str:00000000000000d2 .LASF65
     /tmp/ccV9AulW.s:2349   .debug_str:00000000000002a9 .LASF66
     /tmp/ccV9AulW.s:2403   .debug_str:0000000000000428 .LASF99
     /tmp/ccV9AulW.s:2409   .debug_str:000000000000044e .LASF67
     /tmp/ccV9AulW.s:2361   .debug_str:0000000000000304 .LASF68
     /tmp/ccV9AulW.s:2301   .debug_str:000000000000014a .LASF100
     /tmp/ccV9AulW.s:2421   .debug_str:00000000000004a5 .LASF101
     /tmp/ccV9AulW.s:2337   .debug_str:000000000000025b .LASF69
     /tmp/ccV9AulW.s:2373   .debug_str:0000000000000351 .LASF70
     /tmp/ccV9AulW.s:2341   .debug_str:0000000000000269 .LASF71
     /tmp/ccV9AulW.s:2377   .debug_str:000000000000035c .LASF72
     /tmp/ccV9AulW.s:2335   .debug_str:0000000000000252 .LASF73
     /tmp/ccV9AulW.s:2353   .debug_str:00000000000002d2 .LASF75
     /tmp/ccV9AulW.s:2445   .debug_str:000000000000061b .LASF77
GAS LISTING /tmp/ccV9AulW.s 			page 18


     /tmp/ccV9AulW.s:2443   .debug_str:000000000000060d .LASF102
     /tmp/ccV9AulW.s:2331   .debug_str:0000000000000223 .LASF103
     /tmp/ccV9AulW.s:2371   .debug_str:0000000000000348 .LASF78
     /tmp/ccV9AulW.s:2307   .debug_str:000000000000017b .LASF79
     /tmp/ccV9AulW.s:2415   .debug_str:000000000000047e .LASF104
     /tmp/ccV9AulW.s:2347   .debug_str:000000000000029e .LASF80
     /tmp/ccV9AulW.s:2447   .debug_str:0000000000000634 .LASF81
     /tmp/ccV9AulW.s:2309   .debug_str:000000000000018e .LASF82
     /tmp/ccV9AulW.s:54     .text:0000000000000020 .LFB34
     /tmp/ccV9AulW.s:377    .text:0000000000000188 .LFE34
     /tmp/ccV9AulW.s:2259   .debug_str:0000000000000021 .LASF83
     /tmp/ccV9AulW.s:2170   .debug_loc:0000000000000000 .LLST0
     /tmp/ccV9AulW.s:122    .text:0000000000000078 .LBB49
     /tmp/ccV9AulW.s:242    .text:0000000000000104 .LBE49
     /tmp/ccV9AulW.s:2375   .debug_str:0000000000000357 .LASF84
     /tmp/ccV9AulW.s:2401   .debug_str:0000000000000420 .LASF85
     /tmp/ccV9AulW.s:2285   .debug_str:00000000000000c7 .LASF86
     /tmp/ccV9AulW.s:2315   .debug_str:00000000000001ae .LASF87
     /tmp/ccV9AulW.s:124    .text:0000000000000078 .LBB50
     /tmp/ccV9AulW.s:139    .text:0000000000000084 .LBE50
     /tmp/ccV9AulW.s:145    .text:000000000000008c .LBB52
     /tmp/ccV9AulW.s:160    .text:0000000000000098 .LBE52
     /tmp/ccV9AulW.s:211    .text:00000000000000f4 .LBB54
     /tmp/ccV9AulW.s:222    .text:00000000000000f8 .LBE54
     /tmp/ccV9AulW.s:2195   .debug_loc:0000000000000071 .LLST5
     /tmp/ccV9AulW.s:227    .text:00000000000000fc .LBB56
     /tmp/ccV9AulW.s:241    .text:0000000000000104 .LBE56
     /tmp/ccV9AulW.s:2202   .debug_loc:0000000000000094 .LLST6
     /tmp/ccV9AulW.s:175    .text:00000000000000b0 .LVL3
     /tmp/ccV9AulW.s:180    .text:00000000000000bc .LVL4
     /tmp/ccV9AulW.s:193    .text:00000000000000d0 .LVL5
     /tmp/ccV9AulW.s:198    .text:00000000000000dc .LVL6
     /tmp/ccV9AulW.s:206    .text:00000000000000f0 .LVL7
     /tmp/ccV9AulW.s:283    .text:0000000000000134 .LBB40
     /tmp/ccV9AulW.s:365    .text:000000000000017c .LBE40
     /tmp/ccV9AulW.s:285    .text:0000000000000134 .LBB41
     /tmp/ccV9AulW.s:300    .text:0000000000000140 .LBE41
     /tmp/ccV9AulW.s:304    .text:0000000000000144 .LBB43
     /tmp/ccV9AulW.s:319    .text:0000000000000150 .LBE43
     /tmp/ccV9AulW.s:334    .text:000000000000016c .LBB45
     /tmp/ccV9AulW.s:345    .text:0000000000000170 .LBE45
     /tmp/ccV9AulW.s:2209   .debug_loc:00000000000000b7 .LLST3
     /tmp/ccV9AulW.s:350    .text:0000000000000174 .LBB47
     /tmp/ccV9AulW.s:364    .text:000000000000017c .LBE47
     /tmp/ccV9AulW.s:2216   .debug_loc:00000000000000da .LLST4
     /tmp/ccV9AulW.s:329    .text:0000000000000168 .LVL16
     /tmp/ccV9AulW.s:66     .text:0000000000000030 .LBB30
     /tmp/ccV9AulW.s:83     .text:000000000000003c .LBE30
     /tmp/ccV9AulW.s:246    .text:0000000000000104 .LBB35
     /tmp/ccV9AulW.s:258    .text:000000000000010c .LBE35
     /tmp/ccV9AulW.s:2223   .debug_loc:00000000000000fd .LLST1
     /tmp/ccV9AulW.s:272    .text:000000000000012c .LBB38
     /tmp/ccV9AulW.s:280    .text:0000000000000130 .LBE38
     /tmp/ccV9AulW.s:2231   .debug_loc:0000000000000121 .LLST2
     /tmp/ccV9AulW.s:371    .text:0000000000000184 .LVL21
     /tmp/ccV9AulW.s:10     .text:0000000000000000 .LFB33
     /tmp/ccV9AulW.s:40     .text:0000000000000020 .LFE33
GAS LISTING /tmp/ccV9AulW.s 			page 19


     /tmp/ccV9AulW.s:2451   .debug_str:0000000000000652 .LASF105
     /tmp/ccV9AulW.s:2461   .debug_str:0000000000000699 .LASF88
     /tmp/ccV9AulW.s:2293   .debug_str:0000000000000109 .LASF89
     /tmp/ccV9AulW.s:2261   .debug_str:0000000000000028 .LASF91
     /tmp/ccV9AulW.s:2437   .debug_str:00000000000005d6 .LASF90
     /tmp/ccV9AulW.s:2363   .debug_str:0000000000000314 .LASF92
     /tmp/ccV9AulW.s:2295   .debug_str:000000000000011c .LASF93
     /tmp/ccV9AulW.s:81     .text:000000000000003c .LVL0
     /tmp/ccV9AulW.s:104    .text:0000000000000068 .LVL1
     /tmp/ccV9AulW.s:118    .text:0000000000000078 .LVL2
     /tmp/ccV9AulW.s:238    .text:0000000000000104 .LVL11
     /tmp/ccV9AulW.s:262    .text:0000000000000114 .LVL13
     /tmp/ccV9AulW.s:361    .text:000000000000017c .LVL20
     /tmp/ccV9AulW.s:210    .text:00000000000000f4 .LVL8
     /tmp/ccV9AulW.s:219    .text:00000000000000f8 .LVL9
     /tmp/ccV9AulW.s:226    .text:00000000000000fc .LVL10
     /tmp/ccV9AulW.s:333    .text:000000000000016c .LVL17
     /tmp/ccV9AulW.s:342    .text:0000000000000170 .LVL18
     /tmp/ccV9AulW.s:349    .text:0000000000000174 .LVL19
     /tmp/ccV9AulW.s:255    .text:000000000000010c .LVL12
     /tmp/ccV9AulW.s:271    .text:000000000000012c .LVL14
     /tmp/ccV9AulW.s:278    .text:0000000000000130 .LVL15
     /tmp/ccV9AulW.s:384    .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
_Z11printStringPKc
_Z12printIntegerm
_ZN3TCB16timeSliceCounterE
_ZN3TCB8dispatchEv
_ZN3TCB7runningE
console_handler
